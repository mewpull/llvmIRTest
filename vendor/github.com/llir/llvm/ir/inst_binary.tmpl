// generated by gen.go using 'go generate'; DO NOT EDIT.

// {{ h1 .Desc }}
//
// References:
//    {{ .URL }}

package ir

import (
	"fmt"

	"github.com/llir/llvm/internal/enc"
	"github.com/llir/llvm/ir/metadata"
	"github.com/llir/llvm/ir/types"
	"github.com/llir/llvm/ir/value"
)

{{- range .Insts }}
// {{ lower .Name | h2 }}

// Inst{{ .Name }} represents {{ .Desc }} instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#{{ lower .Name }}-instruction
type Inst{{ .Name }} struct {
	// Parent basic block.
	Parent *BasicBlock
	// Name of the local variable associated with the instruction.
	Name string
	// Operands.
	X, Y value.Value
	// Map from metadata identifier (e.g. !dbg) to metadata associated with the
	// instruction.
	Metadata map[string]*metadata.Metadata
}

// New{{ .Name }} returns a new {{ lower .Name }} instruction based on the given operands.
func New{{ .Name }}(x, y value.Value) *Inst{{ .Name }} {
	return &Inst{{ .Name }}{
		X:        x,
		Y:        y,
		Metadata: make(map[string]*metadata.Metadata),
	}
}

// Type returns the type of the instruction.
func (inst *Inst{{ .Name }}) Type() types.Type {
	return inst.X.Type()
}

// Ident returns the identifier associated with the instruction.
func (inst *Inst{{ .Name }}) Ident() string {
	return enc.Local(inst.Name)
}

// GetName returns the name of the local variable associated with the
// instruction.
func (inst *Inst{{ .Name }}) GetName() string {
	return inst.Name
}

// SetName sets the name of the local variable associated with the instruction.
func (inst *Inst{{ .Name }}) SetName(name string) {
	inst.Name = name
}


// String returns the LLVM syntax representation of the instruction.
func (inst *Inst{{ .Name }}) String() string {
	md := metadataString(inst.Metadata, ",")
	return fmt.Sprintf("%s = {{ lower .Name }} %s %s, %s%s",
		inst.Ident(),
		inst.Type(),
		inst.X.Ident(),
		inst.Y.Ident(),
		md)
}

// GetParent returns the parent basic block of the instruction.
func (inst *Inst{{ .Name }}) GetParent() *BasicBlock {
	return inst.Parent
}

// SetParent sets the parent basic block of the instruction.
func (inst *Inst{{ .Name }}) SetParent(parent *BasicBlock) {
	inst.Parent = parent
}
{{- end }}
