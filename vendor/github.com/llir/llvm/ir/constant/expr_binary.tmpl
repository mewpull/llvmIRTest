// generated by gen.go using 'go generate'; DO NOT EDIT.

// {{ h1 .Desc }}
//
// References:
//    {{ .URL }}

package constant

import (
	"fmt"

	"github.com/llir/llvm/ir/types"
)

{{- range .Insts }}
// {{ lower .Name | h2 }}

// Expr{{ .Name }} represents {{ .Desc }} expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#{{ lower .Name }}-instruction
type Expr{{ .Name }} struct {
	// Operands.
	X, Y Constant
}

// New{{ .Name }} returns a new {{ lower .Name }} expression based on the given operands.
func New{{ .Name }}(x, y Constant) *Expr{{ .Name }} {
	return &Expr{{ .Name }}{
		X: x,
		Y: y,
	}
}

// Type returns the type of the constant expression.
func (expr *Expr{{ .Name }}) Type() types.Type {
	return expr.X.Type()
}

// Ident returns the string representation of the constant expression.
func (expr *Expr{{ .Name }}) Ident() string {
	return fmt.Sprintf("{{ lower .Name }} (%s %s, %s %s)",
		expr.X.Type(),
		expr.X.Ident(),
		expr.Y.Type(),
		expr.Y.Ident())
}

// Immutable ensures that only constants can be assigned to the
// constant.Constant interface.
func (*Expr{{ .Name }}) Immutable() {}

// Simplify returns a simplified version of the constant expression.
func (expr *Expr{{ .Name }}) Simplify() Constant {
	panic("not yet implemented")
}

// MetadataNode ensures that only metadata nodes can be assigned to the
// ir.MetadataNode interface.
func (*Expr{{ .Name }}) MetadataNode() {}
{{- end }}
